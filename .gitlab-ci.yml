services:
    - docker:dind

stages:
    - test
    - publish

frontend-test:
    stage: test
    needs: []
    script:
        - export DEBIAN_FRONTEND=noninteractive
        - apt-get update -qy
        - apt-get install -y python3 python3-pip
        - cd frontend
        - apt-get install -y npm
        - npm install --save-dev jest enzyme enzyme-to-json
        - npx jest --passWithNoTests
        - echo "skipped"
    tags:
        - test
    only:
        changes:
            - frontend/*

update-frontend-snapshots:
    stage: test
    needs: []
    script:
        - export DEBIAN_FRONTEND=noninteractive
        - apt-get update -qy
        - apt-get install -y python3 python3-pip
        - cd frontend
        - npm install --save-dev jest enzyme enzyme-to-json
        - npx jest --updateSnapshot
    tags:
        - test
    only:
        changes:
            - frontend/*
    when: manual

backend-test:
    stage: test
    needs: []
    script:
        - export DEBIAN_FRONTEND=noninteractive
        - apt-get update -qy
        - apt-get install -y python3 python3-pip
        - cd backend
        - apt-get install -y libpq-dev
        - apt-get install -y postgresql postgresql-contrib
        - pip3 install -r requirements.txt
        - python3 manage.py test
    tags:
        - test
    only:
        changes:
            - backend/*
    
clean-docker:
    stage: publish
    needs: []
    script:
        - docker image prune -a 
        - docker system prune -af
        - docker image prune -af
        - docker system prune -af --volumes
        - docker system df
    tags:
        - publish
    when: manual

publish:
    stage: publish
    needs: ["frontend-test", "backend-test"]
    script:
    # fill .env in root
        - echo "POSTGRES_DB=$POSTGRES_DB" > .env
        - echo "POSTGRES_USER=$POSTGRES_USER" >> .env
        - echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
        - echo "POSTGRES_HOST=$POSTGRES_HOST" >> .env
        - echo "POSTGRES_NAME=$POSTGRES_NAME" >> .env
        - echo "POSTGRES_PORT=$POSTGRES_PORT" >> .env
        - echo "MINIO_ROOT_USER=$MINIO_ROOT_USER" >> .env
        - echo "MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD" >> .env
    
    # fill .env in backend
        - cd backend
        - echo "POSTGRES_USER=$POSTGRES_USER" >> .env
        - echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
        - echo "POSTGRES_NAME=$POSTGRES_NAME" >> .env
        - echo "SECRET_KEY=$SECRET_KEY" >> .env
        - echo "DEBUG=$DEBUG" >> .env
        - echo "ALLOWED_HOSTS=$ALLOWED_HOSTS" >> .env
        - echo "DB_ENGINE=$DB_ENGINE" >> .env
        - echo "DB_NAME=$DB_NAME" >> .env
        - echo "DB_USER=$DB_USER" >> .env
        - echo "DB_PASSWORD=$DB_PASSWORD" >> .env
        - echo "DB_HOST=$DB_HOST" >> .env
        - echo "MINIO_ROOT_USER=$MINIO_ROOT_USER" >> .env
        - echo "MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD" >> .env

    # login inorder to save to docker hub
        - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_ACCESS_TOKEN
        - docker-compose build
    
    # tag each image
        - docker tag systemsdevelopmentws23-socialmediacontentmoderation-django:latest $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:django_latest
        - docker tag systemsdevelopmentws23-socialmediacontentmoderation-react:latest $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:react_latest
        - docker tag systemsdevelopmentws23-socialmediacontentmoderation-nginx:latest $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:nginx_latest
        - docker tag systemsdevelopmentws23-socialmediacontentmoderation-uwsgi:latest $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:uwsgi_latest

      # push each image
        - docker push -a $DOCKERHUB_USERNAME/$DOCKERHUB_REPO
        - docker logout 
    tags:
        - publish
    only:
        - development
        - main
        - CI
